// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/[clinic]/[doctor]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[clinic]/[doctor]">> = Specific
  const handler = {} as typeof import("../../src/app/[clinic]/[doctor]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/[clinic]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[clinic]">> = Specific
  const handler = {} as typeof import("../../src/app/[clinic]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/audit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/audit">> = Specific
  const handler = {} as typeof import("../../src/app/admin/audit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../src/app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/settings">> = Specific
  const handler = {} as typeof import("../../src/app/admin/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/login">> = Specific
  const handler = {} as typeof import("../../src/app/auth/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/register/clinic/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/register/clinic">> = Specific
  const handler = {} as typeof import("../../src/app/auth/register/clinic/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/register">> = Specific
  const handler = {} as typeof import("../../src/app/auth/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/bookings/confirmation/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/bookings/confirmation">> = Specific
  const handler = {} as typeof import("../../src/app/bookings/confirmation/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/clinic-admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/clinic-admin">> = Specific
  const handler = {} as typeof import("../../src/app/clinic-admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/unauthorized/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/unauthorized">> = Specific
  const handler = {} as typeof import("../../src/app/unauthorized/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/approve-registration/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/approve-registration">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/approve-registration/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/audit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/audit">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/audit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/clinics/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/clinics">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/clinics/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/config/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/config">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/config/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/pending-registrations/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/pending-registrations">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/pending-registrations/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/register/clinic/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/register/clinic">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/register/clinic/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/register/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/register">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/register/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/bookings/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bookings">> = Specific
  const handler = {} as typeof import("../../src/app/api/bookings/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/cal/availability/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cal/availability">> = Specific
  const handler = {} as typeof import("../../src/app/api/cal/availability/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/cal/clinic/[slug]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cal/clinic/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/api/cal/clinic/[slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/cal/event-types/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cal/event-types">> = Specific
  const handler = {} as typeof import("../../src/app/api/cal/event-types/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/clinic/appointments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/clinic/appointments">> = Specific
  const handler = {} as typeof import("../../src/app/api/clinic/appointments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/clinic/doctors/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/clinic/doctors">> = Specific
  const handler = {} as typeof import("../../src/app/api/clinic/doctors/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/doctor/bookings/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/doctor/bookings">> = Specific
  const handler = {} as typeof import("../../src/app/api/doctor/bookings/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/admin/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../src/app/admin/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/clinic-admin/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/clinic-admin">> = Specific
  const handler = {} as typeof import("../../src/app/clinic-admin/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/dashboard/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
